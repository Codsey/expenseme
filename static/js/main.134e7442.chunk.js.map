{"version":3,"sources":["component/Main/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyPress","e","which","onItemSubmit","bind","assertThisInitialized","state","selector","newData","amount","errorMessage","revColumns","title","field","revData","expColumns","expData","toConsumableArray","push","Item","Cost","setState","objectSpread","react_default","a","createElement","className","_this$state","totalRev","totalExp","map","item","parseInt","Intl","NumberFormat","style","currency","format","_this2","Grid","container","direction","justify","alignItems","xs","sm","getTotal","getErrorMessage","FormControl","variant","width","marginTop","Select","input","OutlinedInput","name","id","value","onChange","target","MenuItem","TextField","label","margin","onKeyPress","type","onKeyDown","evt","key","preventDefault","Button","color","height","onClick","spacing","dist_default","options","search","filtering","concat","getTotalRev","columns","data","editable","onRowUpdate","oldData","Promise","resolve","setTimeout","indexOf","onRowDelete","splice","getTotalExp","Component","App","component_Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.134e7442.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport MaterialTable from \"material-table\";\r\n\r\nimport \"./Main.css\";\r\n\r\nclass Main extends Component {\r\n  constructor() {\r\n    super();\r\n    this.onItemSubmit = this.onItemSubmit.bind(this);\r\n    this.state = {\r\n      selector: \"Income\",\r\n      newData: \"\",\r\n      amount: \"\",\r\n      errorMessage: \"\",\r\n      revColumns: [\r\n        {\r\n          title: \"Item\",\r\n          field: \"Item\"\r\n        },\r\n        {\r\n          title: \"Cost\",\r\n          field: \"Cost\"\r\n        }\r\n      ],\r\n      revData: [],\r\n      expColumns: [\r\n        {\r\n          title: \"Item\",\r\n          field: \"Item\"\r\n        },\r\n        {\r\n          title: \"Cost\",\r\n          field: \"Cost\"\r\n        }\r\n      ],\r\n      expData: []\r\n    };\r\n  }\r\n\r\n  onItemSubmit() {\r\n    const { selector } = this.state;\r\n\r\n    if (selector === \"Income\") {\r\n      const revData = [...this.state.revData];\r\n      revData.push({ Item: this.state.newData, Cost: this.state.amount });\r\n      this.setState({ ...this.state, revData });\r\n    } else if (selector === \"Expense\") {\r\n      const expData = [...this.state.expData];\r\n      expData.push({ Item: this.state.newData, Cost: this.state.amount });\r\n      this.setState({ ...this.state, expData });\r\n    }\r\n    this.setState({ newData: \"\", amount: \"\" });\r\n  }\r\n\r\n  getErrorMessage() {\r\n    if (this.state.errorMessage !== \"\") {\r\n      return <div className=\"error\">{this.state.errorMessage}</div>;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  getTotal() {\r\n    const { revData, expData } = this.state;\r\n    let totalRev = 0;\r\n    let totalExp = 0;\r\n\r\n    revData.map(item => {\r\n      return (totalRev = totalRev + parseInt(item.Cost));\r\n    });\r\n\r\n    expData.map(item => {\r\n      return (totalExp = totalExp + parseInt(item.Cost));\r\n    });\r\n\r\n    const formatter = new Intl.NumberFormat(\"en-US\", {\r\n      style: \"currency\",\r\n      currency: \"USD\"\r\n    });\r\n\r\n    return formatter.format(totalRev - totalExp);\r\n  }\r\n\r\n  getTotalExp() {\r\n    const { expData } = this.state;\r\n    let totalExp = 0;\r\n\r\n    expData.map(item => {\r\n      return (totalExp = totalExp + parseInt(item.Cost));\r\n    });\r\n\r\n    const formatter = new Intl.NumberFormat(\"en-US\", {\r\n      style: \"currency\",\r\n      currency: \"USD\"\r\n    });\r\n\r\n    return formatter.format(totalExp);\r\n  }\r\n\r\n  getTotalRev() {\r\n    const { revData } = this.state;\r\n    let totalRev = 0;\r\n\r\n    revData.map(item => {\r\n      return (totalRev = totalRev + parseInt(item.Cost));\r\n    });\r\n\r\n    const formatter = new Intl.NumberFormat(\"en-US\", {\r\n      style: \"currency\",\r\n      currency: \"USD\"\r\n    });\r\n\r\n    return formatter.format(totalRev);\r\n  }\r\n\r\n  handleKeyPress = e => {\r\n    if (e.which === 13) {\r\n      this.onItemSubmit();\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n        <Grid item xs={12} sm={8}>\r\n          <div className=\"base\">\r\n            <div className=\"main-title\">\r\n              <h1>ExpenseME</h1>\r\n            </div>\r\n            <div className=\"total\">{this.getTotal()}</div>\r\n            {this.getErrorMessage()}\r\n            <div className=\"input-section\">\r\n              <FormControl\r\n                variant=\"outlined\"\r\n                style={{ width: \"20%\", marginTop: \"1rem\" }}\r\n              >\r\n                <Select\r\n                  input={\r\n                    <OutlinedInput name=\"selector\" id=\"outlined-age-simple\" />\r\n                  }\r\n                  value={this.state.selector}\r\n                  onChange={e => this.setState({ selector: e.target.value })}\r\n                >\r\n                  <MenuItem value={\"Income\"}>Income</MenuItem>\r\n                  <MenuItem value={\"Expense\"}>Expense</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              <TextField\r\n                id=\"outlined-name\"\r\n                label=\"Item\"\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                style={{ width: \"40%\" }}\r\n                value={this.state.newData}\r\n                onChange={e => this.setState({ newData: e.target.value })}\r\n                onKeyPress={this.handleKeyPress}\r\n              />\r\n              <TextField\r\n                id=\"outlined-name\"\r\n                type=\"number\"\r\n                label=\"Amount\"\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                style={{ width: \"20%\" }}\r\n                value={this.state.amount}\r\n                onChange={e => this.setState({ amount: e.target.value })}\r\n                onKeyDown={evt =>\r\n                  (evt.key === \"e\" || evt.key === \"+\" || evt.key === \"-\") &&\r\n                  evt.preventDefault()\r\n                }\r\n                onKeyPress={this.handleKeyPress}\r\n              />\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ width: \"20%\", marginTop: \"1rem\", height: \"3.5rem\" }}\r\n                onClick={this.onItemSubmit}\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n            <Grid container spacing={8}>\r\n              <Grid item xs={12} sm={6}>\r\n                <MaterialTable\r\n                  options={{\r\n                    search: false,\r\n                    filtering: false\r\n                  }}\r\n                  title={`Revenus [${this.getTotalRev()}]`}\r\n                  columns={this.state.revColumns}\r\n                  data={this.state.revData}\r\n                  editable={{\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise(resolve => {\r\n                        setTimeout(() => {\r\n                          resolve();\r\n                          const revData = [...this.state.revData];\r\n                          revData[revData.indexOf(oldData)] = newData;\r\n                          this.setState({ ...this.state, revData });\r\n                        }, 600);\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise(resolve => {\r\n                        setTimeout(() => {\r\n                          resolve();\r\n                          const revData = [...this.state.revData];\r\n                          revData.splice(revData.indexOf(oldData), 1);\r\n                          this.setState({ ...this.state, revData });\r\n                        }, 600);\r\n                      })\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <MaterialTable\r\n                  options={{\r\n                    search: false,\r\n                    filtering: false\r\n                  }}\r\n                  title={`Expenses [${this.getTotalExp()}]`}\r\n                  columns={this.state.expColumns}\r\n                  data={this.state.expData}\r\n                  editable={{\r\n                    onRowUpdate: (newData, oldData) =>\r\n                      new Promise(resolve => {\r\n                        setTimeout(() => {\r\n                          resolve();\r\n                          const expData = [...this.state.expData];\r\n                          expData[expData.indexOf(oldData)] = newData;\r\n                          this.setState({ ...this.state, expData });\r\n                        }, 600);\r\n                      }),\r\n                    onRowDelete: oldData =>\r\n                      new Promise(resolve => {\r\n                        setTimeout(() => {\r\n                          resolve();\r\n                          const expData = [...this.state.expData];\r\n                          expData.splice(expData.indexOf(oldData), 1);\r\n                          this.setState({ ...this.state, expData });\r\n                        }, 600);\r\n                      })\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport './App.css'\nimport Main from \"./component/Main/Main\";\nimport 'typeface-roboto';\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}